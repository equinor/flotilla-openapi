openapi: 3.0.1
info:
  title: Flotilla API
  version: 0.1.9
  contact:
    email: fg_robot_dev@equinor.com
  license:
    name: Eclipse 2.0
    url: https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.txt
  description: "The Flotilla API is an open API for monitoring robots on an Equinor\
    \ asset. The API is designed and built according to Equinor's API strategy. \n\
    \nThe API is documented in OpenAPI 3.0 format and follows REST principles. \n\n\
    The principles of API evolution is followed for updating and depreciation of endpoints.\n"
externalDocs:
  description: API documentation
  url: https://equinor.github.io/api-first-workbench
tags:
- name: Robots
  description: 'Robots represent all robots on asset

    '
- name: Missions
  description: 'Missions represent all available missions that can be started/scheduled
    on asset

    '
- name: Events
  description: 'Events represent all events on asset

    '
- name: Reports
  description: 'Reports represent the history of completed and active missions on
    asset

    '
- name: Maps
  description: 'Maps represents 2D-maps used to visualize pose of robot on asset

    '
paths:
  /robots:
    get:
      operationId: getRobots
      summary: List all robots on the asset.
      description: '### Overview

        List all robots on the asset

        '
      security:
      - OAuth2:
        - read
        - write
      tags:
      - Robots
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Robot'
          description: Request successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Unexpected'
    post:
      operationId: postRobot
      summary: Create a new robot
      description: '### Overview

        Create a new robot entry in the database.


        The robot will be added as an active robot and will be included in the frontend.

        '
      tags:
      - Robots
      security:
      - OAuth2:
        - write
      requestBody:
        description: Robot details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Robot'
            examples:
              createRobot:
                $ref: '#/components/examples/createRobot'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRobotResponse'
          description: Succesfully added robot to database
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Unexpected'
  /robots/{robot_id}:
    get:
      operationId: getRobotById
      summary: Lookup robot by specified id.
      description: '### Overview

        Lookup robot by specified id.

        '
      tags:
      - Robots
      security:
      - OAuth2:
        - read
        - write
      parameters:
      - in: path
        name: robot_id
        required: true
        schema:
          type: integer
          format: int32
          example: 21
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'
          description: Request successful and robot returned
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /robots/{robot_id}/streaming:
    get:
      operationId: getRobotStream
      summary: Lookup information for streaming of real time data from robot
      description: "### Overview\nLookup information of real-time data streaming.\
        \ \n\nDescribes the protocol used for distributing real time data and neccesary\
        \ information for connecting to the information sources.\n"
      tags:
      - Robots
      security:
      - OAuth2:
        - read
        - write
      parameters:
      - in: path
        name: robot_id
        required: true
        schema:
          type: integer
          format: int32
          example: 21
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'
          description: Request successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /robots/{robot_id}/schedule:
    get:
      operationId: getRobotSchedule
      summary: Lookup the schedule for the robot
      description: '### Overview

        Get the current schedule of a robot. The schedule is a list of time entries
        where the robot is scheduled to perform a certain mission.


        The minimum start time and maximum end time for the schedule entries can be
        specified in the query. If none is provided, the default start time is current
        time and default end time is start time + one week.

        '
      tags:
      - Robots
      security:
      - OAuth2:
        - read
        - write
      parameters:
      - in: path
        name: robot_id
        required: true
        schema:
          type: integer
          format: int32
          example: 21
      - in: query
        name: startTime
        schema:
          type: string
          format: date-time
          description: Earliest start time for scheduled missions
        required: false
      - in: query
        name: endTime
        schema:
          type: string
          format: date-time
          description: Latest end time for scheduled missions
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: Request successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /robots/{robot_id}/start/{mission_id}:
    post:
      operationId: postStartRobot
      summary: Start a mission with robot
      description: '### Overview

        Start a mission with given id using robot with robot id.

        '
      tags:
      - Robots
      security:
      - OAuth2:
        - write
      parameters:
      - in: path
        name: robot_id
        required: true
        schema:
          type: integer
          format: int32
          example: 21
      - in: path
        name: mission_id
        required: true
        schema:
          type: integer
          format: int32
          example: 287
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartResponse'
          description: Mission succesfully started
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/Unexpected'
  /robots/{robot_id}/stop:
    post:
      operationId: postStopRobot
      summary: Stop robot
      description: '### Overview

        Stop the execution of the current active mission.


        If there is no active mission on robot, nothing happens.'
      tags:
      - Robots
      security:
      - OAuth2:
        - write
      parameters:
      - in: path
        name: robot_id
        required: true
        schema:
          type: integer
          format: int32
          example: 21
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Unexpected'
  /robots/{robot_id}/enable:
    post:
      operationId: postEnableRobot
      summary: Enable or disable an existing robot
      description: '### Overview

        Enable or disable an existing robot.


        Being enabled implies that the robot is available in operation and will be
        visible to users in Flotilla.

        '
      tags:
      - Robots
      security:
      - OAuth2:
        - write
      parameters:
      - in: path
        name: robot_id
        required: true
        schema:
          type: integer
          format: int32
          example: 21
      - in: query
        name: enable
        schema:
          type: boolean
          description: To enable or disable the robot
        required: false
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /missions:
    get:
      operationId: getMissions
      summary: List all available missions on the asset
      description: '### Overview

        List all available missions on the asset in the Echo mission planner

        '
      tags:
      - Missions
      security:
      - OAuth2:
        - read
        - write
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mission'
          description: Request successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /missions/{mission_id}:
    get:
      operationId: getMissionById
      summary: Lookup mission by specified id
      description: '### Overview

        Lookup mission by specified id

        '
      tags:
      - Missions
      security:
      - OAuth2:
        - read
        - write
      parameters:
      - in: path
        name: mission_id
        required: true
        schema:
          type: integer
          example: 271
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mission'
          description: Request successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /events:
    get:
      operationId: getEvent
      summary: Lookup events
      description: '### Overview

        Lookup events

        '
      tags:
      - Events
      security:
      - OAuth2:
        - write
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: Request successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    post:
      operationId: postEvent
      summary: Create new event
      description: '### Overview

        Adds a new event to the robot schedule


        New entries to the schedule can be added as long as they do not conflict with
        already scheduled events.

        '
      tags:
      - Events
      security:
      - OAuth2:
        - write
      requestBody:
        description: Time entry update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
            examples:
              scheduleEvent:
                $ref: '#/components/examples/scheduleEvent'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: Created
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /events/{event_id}:
    delete:
      operationId: deleteEventById
      summary: Remove a specified event
      description: '### Overview

        Deletes an event from the robot schedule.


        Can only be used for events that have not started yet.

        '
      tags:
      - Events
      security:
      - OAuth2:
        - write
      parameters:
      - in: path
        name: event_id
        required: true
        schema:
          type: integer
          format: int32
          example: 21
      responses:
        '204':
          description: Event successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    get:
      operationId: getEventById
      summary: Lookup event with specified id
      description: '### Overview

        Lookup event with specified id.


        Can only be used for events that have not started yet.

        '
      tags:
      - Events
      security:
      - OAuth2:
        - write
      parameters:
      - in: path
        name: event_id
        required: true
        schema:
          type: integer
          format: int32
          example: 102
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: Request successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /map/{x_coord}/{y_coord}/{z_coord}:
    get:
      operationId: getMap
      summary: Find map based on coordinates
      description: '### Overview

        Finds the appropriate map based on the coordinates.

        '
      tags:
      - Maps
      security:
      - OAuth2:
        - read
        - write
      parameters:
      - in: path
        name: x_coord
        required: true
        schema:
          type: number
          format: float
          example: 221.5
      - in: path
        name: y_coord
        required: true
        schema:
          type: number
          format: float
          example: 537.5
      - in: path
        name: z_coord
        required: true
        schema:
          type: number
          format: float
          example: 2.3
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
          description: Request successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /reports:
    get:
      operationId: getReports
      summary: List all available reports on the asset
      description: '### Overview

        List all available reports on the asset.

        '
      tags:
      - Reports
      security:
      - OAuth2:
        - read
        - write
      parameters:
      - in: query
        name: startTime
        schema:
          type: string
          format: date-time
          description: Earliest start time for returned reports
        required: false
      - in: query
        name: endTime
        schema:
          type: string
          format: date-time
          description: Latest end time for returned reports
        required: false
      - in: query
        name: status
        schema:
          type: string
          description: Status for mission
          enum:
          - completed
          - active
          - aborted
        required: false
      - in: query
        name: limit
        schema:
          type: integer
          format: int32
          description: Maximum number of returned reports
        required: false
      - in: query
        name: offset
        schema:
          type: integer
          format: int32
          description: Starting index of returned reports
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /reports/{report_id}:
    get:
      operationId: getReportById
      summary: Lookup report by id
      description: '### Overview

        Lookup report by id

        '
      tags:
      - Reports
      security:
      - OAuth2:
        - read
        - write
      parameters:
      - in: path
        name: report_id
        required: true
        schema:
          type: integer
          example: 212
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
components:
  responses:
    Success:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
          example:
            detail: Success
    Created:
      description: Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
          example:
            detail: The requested resource was created
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: The requested resource was not found
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: The application was unable to authenticate the client
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: The client was authenticated but not authorized to perform this
              action
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: There was a conflict with an existing resource
    Unexpected:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: An unexpected error occurred while processing the request
  parameters:
    apiVersion:
      name: api-version
      in: query
      required: true
      description: api-version must be present in all request as part of the query
        string
      schema:
        type: string
        enum:
        - v1
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://login.windows.net/common/oauth2/authorize?resource=0e595101-1f08-4ce0-8684-148b2e2b8e18
          tokenUrl: https://login.microsoftonline.com/common/oauth2/token
          scopes:
            read: Grants read access
            write: Grants write access
  schemas:
    Robot:
      type: object
      required:
      - id
      - name
      - model
      - serial_number
      - status
      - host
      - port
      - enabled
      - capabilities
      properties:
        id:
          type: integer
          format: int32
          description: Id of robot
          example: 1
        name:
          type: string
          description: Name of robot
          example: Terminator
        model:
          type: string
          description: Model of robot
          example: Turtlebot
        serial_number:
          type: string
          description: Serial number of the robot
          example: CE0460ROBOT
        host:
          type: string
          description: Host address where the robot ISAR instance is reachable
          example: localhost
        port:
          type: integer
          format: int32
          description: Port on the host in which the robot ISAR instance is reachable
          example: 3000
        enabled:
          type: boolean
          description: Wheter the robot is enabled and available for scheduling missions
          example: true
        status:
          type: string
          description: Status of robot
          enum:
          - available
          - offline
          - mission_in_progress
        capabilities:
          type: array
          items:
            type: string
            description: Valid inspection types
            enum:
            - thermal_image
            - image
            - audio
      additionalProperties: false
    Mission:
      type: object
      required:
      - id
      - name
      - link
      - tags
      properties:
        id:
          type: integer
          format: int32
          description: Echo Mission Id
          example: 122
        name:
          type: string
          description: Name of mission in Echo
          example: Valve Inspection Round
        link:
          type: string
          format: uri
          description: Link to mission in Echo
          example: https://echo.equinor.com/mp?editId=122
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      additionalProperties: false
    Report:
      type: object
      required:
      - id
      - startTime
      - endTime
      - robotId
      - missionId
      - status
      - entries
      properties:
        id:
          type: integer
          format: int32
          description: Id of report
          example: 1
        startTime:
          type: string
          format: date-time
          description: Start time of mission
          example: '2022-01-12T10:33:33Z'
        endTime:
          type: string
          format: date-time
          description: End time of mission
          example: '2022-01-12T10:33:33Z'
          nullable: true
        robotId:
          type: integer
          format: int32
          description: Id of robot performing mission
          example: 1
        missionId:
          type: integer
          format: int32
          description: Id of mission
          example: 221
        status:
          type: string
          description: Status for mission
          enum:
          - completed
          - active
          - aborted
        entries:
          type: array
          items:
            $ref: '#/components/schemas/ReportEntry'
      additionalProperties: false
    Map:
      type: object
      required:
      - id
      - data
      - coordinates
      properties:
        id:
          type: integer
          format: int32
          description: Id of map
          example: 1
        data:
          type: string
          format: byte
          description: Byte representation of image of 2D Map
          example: b4345xbnf32b...
        coordinates:
          $ref: '#/components/schemas/Coordinates'
      additionalProperties: false
    Tag:
      type: object
      required:
      - tagId
      - inspectionTypes
      properties:
        tagId:
          type: string
          description: Stid Id for inspection tag
          example: 123-AA-354
        link:
          type: string
          description: Link to tag in Echo
          example: https://echo.equinor.com/tag/313-AA-243
        inspectionTypes:
          type: array
          items:
            type: string
            description: Valid inspection types
            enum:
            - thermal_image
            - image
            - audio
      additionalProperties: false
    ReportEntry:
      type: object
      required:
      - id
      - tagId
      - status
      - inspectionType
      - time
      properties:
        id:
          type: integer
          format: int32
          description: Id of report entry
          example: 1
        tagId:
          type: string
          description: Tag Id of inspection
          example: 123-AA-354
        status:
          type: string
          description: Status for inspection of tag
          enum:
          - completed
          - failed
        inspectionType:
          type: string
          description: Valid inspection types
          enum:
          - thermal_image
          - image
          - audio
        time:
          type: string
          format: date-time
          description: Time Stamp of inspection
          example: '2022-01-12T10:33:33Z'
        link:
          type: string
          format: uri
          description: HTTPS link to inspection result
          example: https://equinor.com
      additionalProperties: false
    Coordinates:
      type: object
      required:
      - referenceSystem
      - xMin
      - xMax
      - yMin
      - yMax
      properties:
        referenceSystem:
          type: string
          description: Reference system for coordinates
          example: EQUINOR:4100001
        xMin:
          type: number
          format: float
          description: Minimum x coordinate in asset frame covered by map
          example: 25.4
        xMax:
          type: number
          format: float
          description: Maximum x-coordinate in asset frame covered by map
          example: 254.3
        yMin:
          type: number
          format: float
          description: Minimum y-coordinate in asset frame covered by map
          example: -10.3
        yMax:
          type: number
          format: float
          description: Maximum x-coordinate in asset frame covered by map
      additionalProperties: false
    Stream:
      type: object
      required:
      - protocol
      - host
      - port
      - topics
      properties:
        protocol:
          type: string
          description: Protocol used for streaming real time data
          enum:
          - MQTT
        host:
          type: string
          format: ipv4
          description: IP-address of host
          example: 192.0.2.146
        port:
          type: string
          description: Port number used
          example: '1888'
        topics:
          type: array
          items:
            $ref: '#/components/schemas/Topic'
      additionalProperties: false
    Topic:
      type: object
      required:
      - path
      - resource
      properties:
        path:
          type: string
          example: robot/pose
        resource:
          type: string
          enum:
          - battery
          - pose
      additionalProperties: false
    Schedule:
      type: object
      required:
      - robotId
      - startDate
      - endDate
      - events
      properties:
        robotId:
          type: integer
          format: int32
          description: Robot id for schedule
          example: 1
        startDate:
          type: string
          format: date
          description: Start date for schedule
          example: '2022-01-12'
        endDate:
          type: string
          format: date
          description: End date for schedule
          example: '2022-01-19'
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
      additionalProperties: false
    Event:
      type: object
      required:
      - id
      - robotId
      - missionId
      - startTime
      - endTime
      properties:
        id:
          type: integer
          format: int32
          description: Id of event
          example: 1
        seriesId:
          type: string
          format: uuid
          description: Series id if the schedule entry is a part of a series
          example: 1b69b353-95ff-402e-9864-a5acf5bd9ddb
          nullable: true
        robotId:
          type: integer
          format: int32
          description: Id of robot
          example: 231
        missionId:
          type: integer
          format: int32
          description: Id of mission in echo
          example: 231
        startTime:
          type: string
          format: date-time
          description: Start time for scheduled mission in local time
          example: '2022-01-12T10:33:33Z'
        endTime:
          type: string
          format: date-time
          description: Expected end time for scheduled mission in local time
          example: '2022-01-13T10:33:33Z'
      additionalProperties: false
    PostResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - success
    CreateRobotResponse:
      type: object
      properties:
        robot_id:
          type: integer
          description: Id of the robot added to the database
          example: 1
          format: int32
    EventRequest:
      type: object
      required:
      - robotId
      - missionId
      - startTime
      properties:
        robotId:
          type: integer
          format: int32
          description: Id of robot
          example: 1
        missionId:
          type: integer
          format: int32
          description: Id of echo mission
          example: 1
        startTime:
          type: string
          format: date-time
          description: Start time of event in local time
          example: '2022-01-01T08:33:33Z'
      additionalProperties: false
    StartResponse:
      type: object
      required:
      - reportId
      properties:
        status:
          type: string
          description: Request status
          enum:
          - success
        reportId:
          type: integer
          format: int32
          description: Id of created report
          example: 1
      additionalProperties: false
    Error:
      type: object
      properties:
        detail:
          type: string
    Success:
      type: object
      properties:
        detail:
          type: string
  examples:
    scheduleEvent:
      summary: Add new event to robot schedule
      value:
        robotId: 1
        missionId: 287
        startTime: '2022-01-12T10:33:33Z'
    start:
      summary: Start mission
      value: {}
    stop:
      summary: Stop robot
      value: {}
    createRobot:
      summary: Create new robot in database
      value:
        name: Terminator
        model: Turtlebot
        serial_number: CE0460ROBOT
        host: localhost
        port: 3000
        enabled: true
        status: available
        capabilities:
        - image
        - thermal_image
        - audio
